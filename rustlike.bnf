<program> ::= <function>*

(* Rust types *)
<signed_type> ::=   "s32"
<float_type> ::=    "f32"
<boolean_type> ::=  "bool"
<char_type> ::=     "char"
<unit_type> ::=     "Unit" (* Kotlin type over Rust () type *)
<type> ::=          <signed_type> | <float_type> | <bool_type> | <char_type> | <unit_type>

<ari_op> ::=    "+" | "-" | "*" | "/"
<rel_op> ::=    "==" | "<=" | ">=" | "<" | ">"
<log_op> ::=    "and" | "or"
<not_op> ::=    "not"
<bin_op> ::=    <ari_op> | <rel_op> | <log_op>

<alpha> ::=         [A-Z] | [a-z]
<number> ::=        [0-9]
<alphanum> ::=      <alpha> | <number>
<identifier> ::=    <alpha> <alphanum>*

<const_float> ::=   number* "." number+
<const_int> ::=     number+
<const_bool> ::=    "true" | "false"

<const_expr> ::=        <const_float> | <const_int> | <const_bool>
<conversion_expr> ::=   <expression> as <type>
<not_expr> ::=          <not_op> <expression>
<bin_expr> ::=          <expression> <bin_op> <expression>
<expression> ::=        <const_expr> | <not_expr> | <bin_expr>

(* C variable declaration *)
<normal_statement> ::= (<type>? <identifier> "=")? <expression> ";"

(* Rust and Python based conditionals *)
<if_statement> ::=          "if" <expression> <block>
<elif_statement> ::=        "elif" <expression> <block>
<else_statement> ::=        "else" <block>
<conditional_statement> ::= <if_statement> <elif_statement>* <else_statement>?

<statement> ::= (<normal_statement> | conditional_statement)
<block> ::=     "{" <statement>* "}"

(* Kotlin function declaration with C parameters *)
<param> ::=         <type> <identifier>
<params> ::=        <param> | <param> "," <params> | ""
<function> ::=      "fun" <identifier> "(" <params> ")" ":" <type> <block>

(* C/Java comments *)
<block_comment> ::= "/*" ignored characters "*/"
<line_comment> ::=  "//" ignored characters "\\n"
