<program> ::= <function>*

(* Rust types *)
<signed_type> ::=   "s32"
<float_type> ::=    "f32"
<boolean_type> ::=  "bool"
<char_type> ::=     "char"
<string_type> ::=   "string"
<unit_type> ::=     "unit" (* Kotlin type over Rust () type *)
<type> ::=          <signed_type> | <float_type> | <bool_type> |
                    <char_type> | <string_type> | <unit_type>

<ari_op> ::=    "+" | "-" | "*" | "/"
<rel_op> ::=    "==" | "<=" | ">=" | "<" | ">"
<log_op> ::=    "and" | "or"
<not_op> ::=    "not"
<bin_op> ::=    <ari_op> | <rel_op> | <log_op>

<alpha> ::=         [A-Z] | [a-z]
<number> ::=        [0-9]
<alphanum> ::=      <alpha> | <number>
<identifier> ::=    (<alpha> | "_") (<alphanum> | "_")*

<const_float> ::=   (<number>* "." <number>+) | (<number>+ "." <number>*)
<const_int> ::=     <number>+
<const_bool> ::=    "true" | "false"
<const_char> ::=    "'" <alphanum> "'"
<cosnt_string> ::=  "\"" <alphanum>* "\""

<arguments> ::= (<identifier> ("," <identifier>)*)?

<const_expr> ::=    <const_float> | <const_int> | <const_bool> | <const_char> | cosnt_string
<conv_expr> ::=     <expression> as <type>
<not_expr> ::=      <not_op> <expression>
<bin_expr> ::=      <expression> <bin_op> <expression>
<call_expr> ::=     <identifier> "(" <arguments> ")"
<expression> ::=    <const_expr> | <not_expr> | <bin_expr> | <call_expr> | "(" <expression> ")"

(* C variable declaration *)
<normal_statement> ::= (<type>? <identifier> "=")? <expression> ";"

(* Rust and Python/BASH based conditionals *)
<if_statement> ::=          "if" <expression> <block>
<elif_statement> ::=        "elif" <expression> <block>
<else_statement> ::=        "else" <block>
<conditional_statement> ::= <if_statement> <elif_statement>* <else_statement>?

<return_statement> ::= "return" <expression> ";"

<statement> ::= (<normal_statement> | conditional_statement)
<block> ::=     "{" <statement>* "}"

(* Kotlin function declaration with C parameters *)
<param> ::=         <type> <identifier>
<params> ::=        (param ("," <param>)*)?
<function> ::=      "fun" <identifier> "(" <params> ")" ":" <type> <block>

(* Java comments *)
<block_comment> ::= "/*" ignored characters "*/"
<line_comment> ::=  "//" ignored characters "\\n"
