<program> ::= <function>*

(* Rust types *)
<signed_type> ::=   "s32"
<float_type> ::=    "f32"
<boolean_type> ::=  "bool"
<char_type> ::=     "char"
<string_type> ::=   "string"
<unit_type> ::=     "unit" (* Kotlin type over Rust () type *)
<type> ::=          <signed_type> | <float_type> | <bool_type> |
                    <char_type> | <string_type> | <unit_type>

<alpha> ::=         [A-Z] | [a-z]
<number> ::=        [0-9]
<alphanum> ::=      <alpha> | <number>
<identifier> ::=    (<alpha> | "_") (<alphanum> | "_")*

<const_float> ::=   (<number>* "." <number>+) | (<number>+ "." <number>*)
<const_int> ::=     <number>+
<const_bool> ::=    "true" | "false"
<const_char> ::=    "'" <alphanum> "'"
<const_string> ::=  "\"" <alphanum>* "\""
<const> ::=      <const_float> | <const_int> | <const_bool> |
                    <const_char> | <const_string>

<not_op> ::=    "not" (* Python logical operators *)
<log_op> ::=    "and" | "or"
<rel_op> ::=    "==" | "<=" | ">=" | "<" | ">"
<sum_op> ::=    "+" | "-"
<mul_op> ::=    "*" | "/"

(* precedence control expressions *)
<expr> ::= <log_expr>
<log_expr> ::= <not_op> <log_expr>
<log_expr> ::= <log_expr> <log_op> <rel_expr>
<log_expr> ::= <rel_expr>
<rel_expr> ::= <rel_expr> <rel_op> <sum_expr>
<rel_expr> ::= <sum_expr>
<sum_expr> ::= <sum_expr> <sum_op> <mul_expr>
<sum_expr> ::= <mul_expr>
<mul_expr> ::= <mul_expr> <mul_op> <leaf_expr>
<mul_expr> ::= <leaf_expr>

(* leaf expressions *)
<const_expr> ::=    <const>
<sub_expr> ::=      "(" <expr> ")"
<conv_expr> ::=     <expr> as <type>
<call_expr> ::=     <identifier> "(" <args> ")"
<leaf_expr> ::=     <const_expr> | <sub_expr> | <conv_expr>
                    <call_expr>

(* C variable declaration *)
<normal_stmnt> ::= (<type>? <identifier> "=")? <expr> ";"

(* Rust and Python/BASH based conditionals *)
<if_stmnt> ::=          "if" <expr> <block>
<elif_stmnt> ::=        "elif" <expr> <block>
<else_stmnt> ::=        "else" <block>
<conditional_stmnt> ::= <if_stmnt> <elif_stmnt>* <else_stmnt>?

<return_stmnt> ::= "return" <expr> ";"

<stmnt> ::= <normal_stmnt> | conditional_stmnt | <return_stmnt>
<block> ::=     "{" <stmnt>* "}"

(* Kotlin function declaration with C parameters *)
<args> ::=          (<identifier> ("," <identifier>)*)?
<param> ::=         <type> <identifier>
<params> ::=        (param ("," <param>)*)?
<function> ::=      "fun" <identifier> "(" <params> ")" ":" <type> <block>

(* Java comments *)
<block_comment> ::= "/*" ignored characters "*/"
<line_comment> ::=  "//" ignored characters "\\n"
